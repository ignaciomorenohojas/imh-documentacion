CodCuenta:
  type: string
  description: Id of the user (i.e., legacy idUser).
  example: 11939
Iban:
  type: string
  pattern: '^[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}$'
  # consists of:
  #   country code (two letters - ISO 3166-1 alpha-2)
  #   two check digits
  #   up to 30 alphanumeric characters that are country-specific
  minLength: 1
  maxLength: 30
  description: 'International Bank Account Number, as defined in ISO 13616:2007'
  example: 'ES6112343456420456323532'
EuroCentimosPositivos:
  description: Money amount in Euro cents >= 0
  type: integer # representation as Euro cent instead of Euro to avoid floating point rounding problems and need for custom 'number' format
  minimum: 0
EuroCentimos:
  description: 'Money amount in Euro cents, also allows negative amounts.'
  type: integer # representation as Euro cent instead of Euro to avoid floating point rounding problems and need for custom 'number' format
Bic:
  description: Business Identifier Code, also known as Swift Code. International identifier for financial and non-financial institutions, commonly used for international bank transfers.
  type: string
  pattern: '^[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?$'
  # consists of:
  #   institution code (4 letters)
  #   country code (2 letters - ISO 3166-1 alpha-2)
  #   location code (2 alphanumeric characters)
  #   optional branch code (3 alphanumeric characters)
  example: 'BBVAESMM'
CodigoMoneda:
  description: A currency represented by its ISO 4217 alpha code
  type: string
  pattern: "^[A-Z]{3}$"
  example: "EUR"
MonetaryAmount:
  description: A monetary amount
  type: object
  properties:
    value:
      "$ref": "#/components/schemas/ValorMonetario"
    currency:
      "$ref": "#/components/schemas/CodigoMoneda"
  required: [value, currency]
  example:
    value: "0.01"
    currency: "EUR"
ValorMonetario:
  description: The numerical part of a monetary amount in decimal notation. Negative values are allowed.
  type: string   # string conserves decimal precision
  format: number # number is a custom string format that is supported by some, but not all tooling
  pattern: '^(\-|\+)?((\d+(\.\d*)?)|(\.\d+))$'  # Variable number of digits, with at least one digit required, before or after the decimal point. Allows both positive and negative values.
  x-examples:
    - "100.234567"
    - "010"
    - "-.05"
    - "+1"
    - "10"
    - "100."